#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <chrono>

#define numOfChars 256
int lastPlace = 0;

std::string readFileIntoString(const std::string& path) {
    std::ifstream input_file(path);
    
    return std::string((std::istreambuf_iterator<char>(input_file)), std::istreambuf_iterator<char>());
}

std::string toLowerCase(std::string upperWord) {
    if (int(upperWord[0]) < 91 && int(upperWord[0]) > 64) {
        upperWord[0] = upperWord[0] + 32;
    }

    return upperWord;
}

void charPattern(std::string word, int wordPattern[numOfChars], int size) {
    for (int i = 0; i < numOfChars; ++i) {
        wordPattern[i] = size;
    }

    int i;

    for (i = 0; i < size - 1; ++i) {
        wordPattern[(int)word[i]] = size - i - 1;
    }
    wordPattern[(int)word[i]] = size;
}

int horSpoon(int wordPattern[], std::string txt, std::string word) {
    int lastLetter = word.length() - 1;
    int index = lastLetter;
    int lastIndex = index;

    int found = 0;

    while (lastLetter > -1) {
        if (index >= txt.length()) {
            return -1;
        }

        if (word[lastLetter] == txt[index]) {
            index--;
            lastLetter--;
        }
        else {
            lastLetter = word.length() - 1;
            index = lastIndex + wordPattern[int(txt[index])];
            lastIndex = index;
        }
    }

    if (index == -1) {
        return index + 1;
    }

    return index;
}

std::vector<std::string> breakTheQuestion(std::string question) {
    std::vector<std::string> words;
    std::string word = "";

    for (auto i : question) {
        if (i == ' ' || i == '?' || i == '.') {
            words.push_back(word);
            word = "";
        }
        else {
            word += i;
        }
    }

    return words;
}

std::string findSentence(int index, std::string txt) {
    while (txt[index] != '.') {
        index--;
    }

    int begin = index + 2;
    index = begin;
   

    while (txt[index] != '.') {
        index++;
    }
    int count = index - begin;

    lastPlace = index;

    return txt.substr(begin, count);
}

std::string longestWord(std::vector<std::string> quizList) {
    int longest = -1;
    int longestCount = 0;

    for (size_t i = 0; i < quizList.size(); i++) {
        if (quizList[i].length() > longestCount) {
            longest = i;
            longestCount = quizList[i].length();
        }
    }

    return quizList[longest];
}

bool isCorrectSentence(std::string foundOne, std::vector<std::string> toCheckList) {
    double maxPoint = toCheckList.size();
    double point = 0;

    for (auto word : toCheckList) {
        int wordPattern[numOfChars];
        charPattern(word, wordPattern, word.length());

        if (horSpoon(wordPattern, foundOne, word) != -1) {
            point++;
        }
    }

    if (point / maxPoint >= 0.66) {
        return true;
    }

    return false;
}

void findAnswer(std::vector<std::string> toCheckList, std::string gotchaOne) {
    std::vector<std::string> gotchaList = breakTheQuestion(gotchaOne + ".");

    std::string stopWord = "a about above after again against all am an and any are aren't as at be because been before being below between both but by can't cannot could couldn't did didn't do does doesn't doing don't down during each few for from further had hadn't has hasn't have haven't having he he'd he'll he's her here here's hers herself him himself his how how's i i'd i'll i'm i've if in into is isn't it it's its itself let's me more most mustn't my myself no nor not of off on once only or other ought our ours ourselves out over own same shan't she she'd she'll she's should shouldn't so some such than that that's the their theirs them themselves then there there's these they they'd they'll they're they've this those through to too under until up very was wasn't we we'd we'll we're we've were weren't what what's when when's where where's which while who who's whom why why's with won't would wouldn't you you'd you'll you're you've your yours yourself yourselves";

    for (auto quizWord : toCheckList) {
        int wordPattern[numOfChars];
        charPattern(quizWord, wordPattern, quizWord.length());

        for (auto gotWord = gotchaList.begin(); gotWord < gotchaList.end(); gotWord++) {
            if (horSpoon(wordPattern, *gotWord, quizWord) != -1) {
                gotchaList.erase(gotWord);
                break;
            }
        }
    }

    for (auto i : gotchaList) {
        std::string original = i;
        i = toLowerCase(i);

        int wordPattern[numOfChars];
        charPattern(i, wordPattern, i.length());

        if (horSpoon(wordPattern, stopWord, i) != -1) {
            
        }
        else {
            std::cout << original << std::endl;
        }
    }
}

int main() {
    int wordPattern[numOfChars];

    std::string script = readFileIntoString("the_truman_show_script.txt");
    std::ifstream quiz("questions.txt");
    std::string quizOne;
    int quizIndex = 1;

    while (getline(quiz, quizOne)) {
        std::vector<std::string> quizSentenceList = breakTheQuestion(quizOne);

        std::cout << quizIndex << ") " << quizOne << std::endl;

        std::string longestOne = longestWord(quizSentenceList);

        charPattern(longestOne, wordPattern, longestOne.length());
        int s = horSpoon(wordPattern, script, longestOne);
        std::string gotcha = findSentence(s, script);

        while (!isCorrectSentence(gotcha, quizSentenceList)) {
            std::string newScript = script.substr(lastPlace, script.length());

            int s = horSpoon(wordPattern, newScript, longestOne);
            gotcha = findSentence(s, newScript);
        }

        findAnswer(quizSentenceList, gotcha);
        quizIndex++;
    }
}